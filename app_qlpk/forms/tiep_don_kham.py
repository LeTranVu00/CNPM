from PyQt5.QtWidgets import (
    QWidget, QLabel, QLineEdit, QComboBox, QCheckBox, QDateEdit,
    QTableWidget, QPushButton, QVBoxLayout, QHBoxLayout,
    QGridLayout, QGroupBox, QSplitter, QHeaderView, QCompleter,
    QTableWidgetItem, QMessageBox, QAbstractItemView
)
# PDF generation
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.cidfonts import UnicodeCIDFont
import os

# ƒêƒÉng k√Ω font ti·∫øng Vi·ªát
font_path = os.path.join(os.path.dirname(__file__), "fonts", "arial.ttf")
pdfmetrics.registerFont(TTFont("ArialUnicode", font_path))

from PyQt5.QtCore import Qt, QDate, QStringListModel
from PyQt5.QtGui import QFont
from database import get_connection, initialize_database
initialize_database()

class TiepDonKham(QWidget):
    def __init__(self):
        self.is_resetting = False # Tr√°nh g·ªçi ƒë·ªá quy khi reset form
        super().__init__()
        self.initUI() # Kh·ªüi t·∫°o giao di·ªán
        self.is_edit_mode = False  # Bi·∫øn tr·∫°ng th√°i ch·ªânh s·ª≠a
        self.selected_ma_hoso = None  # M√£ h·ªì s∆° ƒëang ch·ªçn ƒë·ªÉ s·ª≠a
        self.load_benh_nhan_list() # Load danh s√°ch b·ªánh nh√¢n v√†o combobox
        self.reset_form() # Kh·ªüi ƒë·∫ßu reset form
        self.connect_combobox_event() # K·∫øt n·ªëi s·ª± ki·ªán ch·ªçn combobox
        self.load_danh_sach_tiep_don() # Load danh s√°ch ti·∫øp ƒë√≥n
        self.load_thongke_luot_tiepdon() # Load th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n

        # Khi kh·ªüi t·∫°o, load danh s√°ch b·ªánh nh√¢n v√†o combobox
    def load_benh_nhan_list(self):
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT ho_ten FROM benh_nhan ORDER BY ho_ten")
        names = [row[0] for row in cur.fetchall()]
        conn.close()
    
        # G·∫Øn danh s√°ch v√†o combobox v√† completer
        self.combo_hoten.clear()
        self.combo_hoten.addItems(names)
    
        model = QStringListModel(names)
        self.completer.setModel(model)
    
    def update_age(self):
        today = QDate.currentDate()
        birth = self.ngaysinh.date()
        age = birth.daysTo(today) // 365
        self.tuoi.setText(str(age))



    def initUI(self):
        # Font m·∫∑c ƒë·ªãnh
        self.setFont(QFont("Arial", 10))

        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)
        main_layout.setSpacing(10)

        # ========== NH√ìM 1: TH√îNG TIN B·ªÜNH NH√ÇN + TH·ªêNG K√ä L∆Ø·ª¢T ==========
        top_splitter = QSplitter(Qt.Horizontal)
        top_splitter.setHandleWidth(4)

        # --- B√™n tr√°i: Th√¥ng tin b·ªánh nh√¢n ---
        group_bn = QGroupBox("TH√îNG TIN B·ªÜNH NH√ÇN")
        group_bn.setStyleSheet("QGroupBox { font-weight: bold; color: #d32f2f; }")
        form_bn = QGridLayout()
        form_bn.setHorizontalSpacing(10)
        form_bn.setVerticalSpacing(6)

        # H·ªç t√™n (ComboBox c√≥ th·ªÉ g√µ)
        form_bn.addWidget(QLabel("H·ªç v√† t√™n "), 0, 0)
        self.combo_hoten = QComboBox()
        self.combo_hoten.setEditable(True)

        # Completer g·ª£i √Ω
        self.completer = QCompleter()
        self.completer.setCaseSensitivity(False)
        self.combo_hoten.setCompleter(self.completer)
        form_bn.addWidget(self.combo_hoten, 0, 1)

        # Gi·ªõi t√≠nh
        form_bn.addWidget(QLabel("Gi·ªõi t√≠nh "), 0, 2)
        self.gioitinh = QComboBox()
        self.gioitinh.addItem("Ch·ªçn gi·ªõi t√≠nh")
        self.gioitinh.model().item(0).setFlags(Qt.NoItemFlags)
        self.gioitinh.addItems(["Nam", "N·ªØ", "Kh√°c"])
        form_bn.addWidget(self.gioitinh, 0, 3)

        # Ng√†y sinh
        form_bn.addWidget(QLabel("Ng√†y sinh "), 1, 0)
        self.ngaysinh = QDateEdit()
        self.ngaysinh.setDate(QDate.currentDate())
        self.ngaysinh.setDisplayFormat("dd/MM/yyyy")
        form_bn.addWidget(self.ngaysinh, 1, 1)

        # Tu·ªïi (readonly)
        form_bn.addWidget(QLabel("Tu·ªïi"), 1, 2)
        self.tuoi = QLineEdit()
        self.tuoi.setReadOnly(True)
        form_bn.addWidget(self.tuoi, 1, 3)

        self.ngaysinh.dateChanged.connect(self.update_age)

        # ƒê·ªãa ch·ªâ
        form_bn.addWidget(QLabel("ƒê·ªãa ch·ªâ"), 2, 0)
        self.input_diachi = QLineEdit()
        form_bn.addWidget(self.input_diachi, 2, 1, 1, 3)

        # ƒêi·ªán tho·∫°i
        form_bn.addWidget(QLabel("ƒêi·ªán tho·∫°i"), 3, 0)
        self.input_dienthoai = QLineEdit()
        form_bn.addWidget(self.input_dienthoai, 3, 1)

        # ƒê·ªëi t∆∞·ª£ng
        form_bn.addWidget(QLabel("ƒê·ªëi t∆∞·ª£ng"), 3, 2)
        self.doituong = QComboBox()
        self.doituong.addItem("-Ch·ªçn ƒë·ªëi t∆∞·ª£ng-")
        self.doituong.model().item(0).setFlags(Qt.NoItemFlags)
        self.doituong.addItems(["BHYT", "D√¢n s·ª±", "Kh√°c"])
        form_bn.addWidget(self.doituong, 3, 3)

        # Ngh·ªÅ nghi·ªáp
        form_bn.addWidget(QLabel("Ngh·ªÅ nghi·ªáp"), 4, 0)
        self.input_nghenghiep = QLineEdit()
        form_bn.addWidget(self.input_nghenghiep, 4, 1)

        # Ng∆∞·ªùi gi·ªõi thi·ªáu
        form_bn.addWidget(QLabel("Ng∆∞·ªùi gi·ªõi thi·ªáu"), 4, 2)
        self.nguoigt = QComboBox()
        self.nguoigt.addItem("-Ch·ªçn ng∆∞·ªùi gi·ªõi thi·ªáu-")
        self.nguoigt.model().item(0).setFlags(Qt.NoItemFlags)
        self.nguoigt.addItems(["B√°c sƒ©", "Ti·∫øp t√¢n", "Kh√°c"])
        form_bn.addWidget(self.nguoigt, 4, 3)

        # Lo·∫°i kh√°m
        form_bn.addWidget(QLabel("Lo·∫°i kh√°m "), 5, 0)
        self.loaikham = QComboBox()
        self.loaikham.addItem("-Nh·∫•n ƒë·ªÉ ch·ªçn-")
        self.loaikham.model().item(0).setFlags(Qt.NoItemFlags)
        self.loaikham.addItems(["Kh√°m v√† t∆∞ v·∫•n", "K√™ ƒë∆°n", "Kh√°c"])
        form_bn.addWidget(self.loaikham, 5, 1)

        # S·ªë cccd
        form_bn.addWidget(QLabel("S·ªë CCCD"), 5, 2)
        self.input_cccd = QLineEdit()
        form_bn.addWidget(self.input_cccd, 5, 3)

        group_bn.setLayout(form_bn)


        # --- B√™n ph·∫£i: Th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n ---
        group_thongke = QGroupBox("TH·ªêNG K√ä L∆Ø·ª¢T TI·∫æP ƒê√ìN")
        group_thongke.setStyleSheet("QGroupBox { font-weight: bold; color: #d32f2f; }")
        thongke_layout = QVBoxLayout()
        self.table_thongke = QTableWidget(0, 3)
        self.table_thongke.setHorizontalHeaderLabels(["Ph√≤ng kh√°m", "Ti·∫øp ƒë√≥n", "ƒê√£ kh√°m"])
        # üö´ Kh√¥ng cho ch·ªânh s·ª≠a √¥
        self.table_thongke.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # ‚úÖ Khi ch·ªçn, ch·ªâ ƒë∆∞·ª£c ch·ªçn nguy√™n h√†ng
        self.table_thongke.setSelectionBehavior(QAbstractItemView.SelectRows)

        # ‚úÖ Kh√¥ng cho ch·ªçn nhi·ªÅu h√†ng c√πng l√∫c
        self.table_thongke.setSelectionMode(QAbstractItemView.SingleSelection)

        # ‚úÖ ·∫®n c·ªôt s·ªë th·ª© t·ª± b√™n tr√°i
        self.table_thongke.verticalHeader().setVisible(False)

        # ‚úÖ CƒÉn ƒë·ªÅu c·ªôt v√† h√†ng cho ƒë·∫πp
        self.table_thongke.horizontalHeader().setStretchLastSection(True)
        self.table_thongke.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # ‚úÖ M√†u xen k·∫Ω (nh√¨n d·ªÖ h∆°n)
        self.table_thongke.setAlternatingRowColors(True)
        self.table_thongke.setStyleSheet("alternate-background-color: #f9f9f9;")
        self.table_thongke.horizontalHeader().setStretchLastSection(True)
        self.table_thongke.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        self.table_thongke.horizontalHeader().setStretchLastSection(True)
        self.table_thongke.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        thongke_layout.addWidget(self.table_thongke)
        group_thongke.setLayout(thongke_layout)

        top_splitter.addWidget(group_bn)
        top_splitter.addWidget(group_thongke)
        top_splitter.setStretchFactor(0, 3)
        top_splitter.setStretchFactor(1, 2)

        main_layout.addWidget(top_splitter)

        # ========== NH√ìM 2: TH√îNG TIN TI·∫æP ƒê√ìN BAN ƒê·∫¶U ==========
        group_tiepdon = QGroupBox("TH√îNG TIN TI·∫æP ƒê√ìN BAN ƒê·∫¶U")
        group_tiepdon.setStyleSheet("QGroupBox { font-weight: bold; color: #d32f2f; }")
        grid2 = QGridLayout()
        grid2.setHorizontalSpacing(10)
        grid2.setVerticalSpacing(6)

        grid2.addWidget(QLabel("S·ªë h·ªì s∆°"), 0, 0)
        self.sohoso = QLineEdit()
        # T·ª± ƒë·ªông sinh, kh√¥ng cho s·ª≠a
        self.sohoso.setReadOnly(True)
        grid2.addWidget(self.sohoso, 0, 1)

        grid2.addWidget(QLabel("T√¨nh tr·∫°ng BN"), 0, 2)
        self.combo_tinhtrang = QComboBox()
        self.combo_tinhtrang.addItem("-Nh·∫•n ƒë·ªÉ ch·ªçn-")
        self.combo_tinhtrang.model().item(0).setFlags(Qt.NoItemFlags)
        self.combo_tinhtrang.addItems(["·ªîn ƒë·ªãnh", "N·∫∑ng", "Nguy k·ªãch", "ƒêang ƒëi·ªÅu tr·ªã", "Kh·ªèi b·ªánh"])
        grid2.addWidget(self.combo_tinhtrang, 0, 3)

        grid2.addWidget(QLabel("Ti·ªÅn kh√°m"), 0, 4)
        self.input_tienkham = QLineEdit("0")
        grid2.addWidget(self.input_tienkham, 0, 5)

        grid2.addWidget(QLabel("Ph√≤ng kh√°m"), 1, 0)
        self.combo_phongkham = QComboBox()
        self.combo_phongkham.addItem("-Nh·∫•n ƒë·ªÉ ch·ªçn-")
        self.combo_phongkham.model().item(0).setFlags(Qt.NoItemFlags)
        self.combo_phongkham.addItems([
            "Ph√≤ng Kh√°m N·ªôi t·ªïng qu√°t", "Ph√≤ng Kh√°m Ngo·∫°i", "Ph√≤ng Tai - M≈©i - H·ªçng",
            "Ph√≤ng M·∫Øt", "Ph√≤ng RƒÉng - H√†m - M·∫∑t", "Ph√≤ng Da li·ªÖu",
            "Ph√≤ng S·∫£n - Ph·ª• khoa", "Ph√≤ng Nhi", "Ph√≤ng Kh√°m ƒê√¥ng y"
        ])
        grid2.addWidget(self.combo_phongkham, 1, 1)

        grid2.addWidget(QLabel("Ng√†y l·∫≠p"), 1, 2)
        self.date_ngaylap = QDateEdit(QDate.currentDate())
        self.date_ngaylap.setDisplayFormat("dd/MM/yyyy")
        grid2.addWidget(self.date_ngaylap, 1, 3)

        grid2.addWidget(QLabel("NV ti·∫øp ƒë√≥n"), 1, 4)
        self.combo_nvtiepdon = QComboBox()
        self.combo_nvtiepdon.addItem("-Nh·∫•n ƒë·ªÉ ch·ªçn-")
        self.combo_nvtiepdon.model().item(0).setFlags(Qt.NoItemFlags)  # Kh√¥ng cho ch·ªçn m·ª•c ƒë·∫ßu ti√™n
        self.combo_nvtiepdon.addItems(["Nguy·ªÖn Th·ªã Lan", "Tr·∫ßn VƒÉn H√πng", "Ph·∫°m Thu Trang", "L√™ Minh ƒê·ª©c"])
        grid2.addWidget(self.combo_nvtiepdon, 1, 5)

        grid2.addWidget(QLabel("B√°c s·ªπ kh√°m"), 2, 0)
        self.combo_bacsi = QComboBox()
        self.combo_bacsi.addItem("-Nh·∫•n ƒë·ªÉ ch·ªçn-")
        self.combo_bacsi.model().item(0).setFlags(Qt.NoItemFlags)
        self.combo_bacsi.addItems(["BS. Nguy·ªÖn VƒÉn A", "BS. Tr·∫ßn Th·ªã B", "BS. L√™ VƒÉn C"])
        grid2.addWidget(self.combo_bacsi, 2, 1)

        grid2.addWidget(QLabel("Huy·∫øt √°p (mmHg)"), 2, 2)
        self.input_huyetap = QLineEdit()
        grid2.addWidget(self.input_huyetap, 2, 3)

        grid2.addWidget(QLabel("Nhi·ªát ƒë·ªô (¬∞C)"), 2, 4)
        self.input_nhietdo = QLineEdit()
        grid2.addWidget(self.input_nhietdo, 2, 5)

        grid2.addWidget(QLabel("Chi·ªÅu cao (cm)"), 3, 0)
        self.input_chieucao = QLineEdit()
        grid2.addWidget(self.input_chieucao, 3, 1)

        grid2.addWidget(QLabel("C√¢n n·∫∑ng (kg)"), 3, 2)
        self.input_cannang = QLineEdit()
        grid2.addWidget(self.input_cannang, 3, 3)

        group_tiepdon.setLayout(grid2)
        main_layout.addWidget(group_tiepdon)


        # ========== NH√ìM 3: DANH S√ÅCH PHI·∫æU TI·∫æP ƒê√ìN KCB ==========
        group_ds = QGroupBox("DANH S√ÅCH PHI·∫æU TI·∫æP ƒê√ìN KCB")
        group_ds.setStyleSheet("QGroupBox { font-weight: bold; color: #d32f2f; }")
        vbox = QVBoxLayout()
        self.tableTiepDon = QTableWidget(0, 6)
        self.tableTiepDon.setHorizontalHeaderLabels(["S·ªë h·ªì s∆°", "Ng√†y l·∫≠p", "Ph√≤ng kh√°m", "H·ªç t√™n BN", "B√°c sƒ© kh√°m", "T√¨nh tr·∫°ng"])
        # Th√™m signal khi ch·ªçn 1 h√†ng
        self.tableTiepDon.cellClicked.connect(self.on_row_selected)
        self.selected_ma_hoso = None
        self.tableTiepDon.horizontalHeader().setStretchLastSection(True)
        self.tableTiepDon.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        # üö´ Kh√¥ng cho ph√©p ch·ªânh s·ª≠a
        self.tableTiepDon.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # ‚úÖ Khi ch·ªçn, ch·ªâ ƒë∆∞·ª£c ch·ªçn nguy√™n h√†ng
        self.tableTiepDon.setSelectionBehavior(QAbstractItemView.SelectRows)

        # ‚úÖ Kh√¥ng cho ch·ªçn nhi·ªÅu h√†ng
        self.tableTiepDon.setSelectionMode(QAbstractItemView.SingleSelection)

        # ‚úÖ ·∫®n c·ªôt s·ªë th·ª© t·ª± b√™n tr√°i
        self.tableTiepDon.verticalHeader().setVisible(False)

        # ‚úÖ L√†m ƒë·∫πp b·∫£ng (m√†u xen k·∫Ω)
        self.tableTiepDon.setAlternatingRowColors(True)
        self.tableTiepDon.setStyleSheet("alternate-background-color: #f9f9f9;")

        # ‚úÖ (T√πy ch·ªçn) CƒÉn gi·ªØa ch·ªØ trong to√†n b·∫£ng
        self.tableTiepDon.setStyleSheet("""
            QTableWidget::item {
                text-align: center;
            }
        """)


        self.tableTiepDon.horizontalHeader().setStretchLastSection(True)
        self.tableTiepDon.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        vbox.addWidget(self.tableTiepDon)
        group_ds.setLayout(vbox)
        main_layout.addWidget(group_ds, 1)  # h·ªá s·ªë gi√£n = 1 ƒë·ªÉ t·ª± k√©o full kh√¥ng gian c√≤n l·∫°i

        # ========== NH√ìM 4: C√ÅC N√öT CH·ª®C NƒÇNG ==========
        buttons = QHBoxLayout()
        buttons.setSpacing(10)

        # T·∫°o t·ª´ng n√∫t ri√™ng ƒë·ªÉ g√°n ch·ª©c nƒÉng
        self.btn_nhapmoi = QPushButton("Nh·∫≠p m·ªõi (F1)")
        self.btn_sua = QPushButton("S·ª≠a")
        self.btn_xoa = QPushButton("X√≥a")
        self.btn_inphieu = QPushButton("In phi·∫øu")
        self.btn_instt = QPushButton("In STT")

        # Set k√≠ch th∆∞·ªõc
        for btn in [self.btn_nhapmoi, self.btn_sua, self.btn_xoa, self.btn_inphieu, self.btn_instt]:
            btn.setMinimumWidth(100)
            buttons.addWidget(btn)

        main_layout.addLayout(buttons)
        self.setLayout(main_layout)
        # G√°n s·ª± ki·ªán n√∫t "Nh·∫≠p m·ªõi" ƒë·ªÉ l∆∞u d·ªØ li·ªáu
        self.btn_nhapmoi.clicked.disconnect() if self.btn_nhapmoi.receivers(self.btn_nhapmoi.clicked) else None
        self.btn_nhapmoi.clicked.connect(self.save_and_reset)

        # G√°n s·ª± ki·ªán n√∫t "S·ª≠a"
        self.btn_sua.clicked.connect(self.sua_du_lieu)

        # G√°n s·ª± ki·ªán n√∫t "X√≥a"
        self.btn_xoa.clicked.connect(self.xoa_du_lieu)

        # G√°n s·ª± ki·ªán n√∫t "In phi·∫øu"
        self.btn_inphieu.clicked.connect(self.in_phieu_tiep_don)

        # G√°n s·ª± ki·ªán n√∫t "In STT"
        self.btn_instt.clicked.connect(self.in_so_thu_tu)


    # ---------------------------
    # Helper: ki·ªÉm tra c·ªôt c√≥ t·ªìn t·∫°i
    # ---------------------------
    def table_has_column(self, conn, table, column):
        cur = conn.cursor()
        cur.execute(f"PRAGMA table_info({table})")
        cols = [r[1] for r in cur.fetchall()]
        return column in cols


    # ---------------------------
    # Helper: th√™m c·ªôt n·∫øu thi·∫øu
    # ---------------------------
    def add_column_if_missing(self, conn, table, column, col_type="TEXT"):
        if not self.table_has_column(conn, table, column):
            cur = conn.cursor()
            cur.execute(f"ALTER TABLE {table} ADD COLUMN {column} {col_type}")
            conn.commit()

    # ---------------------------
    # T√¨m b·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i
    # Ki·ªÉm tra theo: t√™n, s·ªë ƒëi·ªán tho·∫°i (n·∫øu c·ªôt dien_thoai t·ªìn t·∫°i), cccd (n·∫øu c√≥)
    # ---------------------------
    def find_existing_patient(self, conn, ho_ten, dien_thoai=None, so_cccd=None):
        cur = conn.cursor()

        conditions = []
        params = []

        if ho_ten:
            conditions.append("ho_ten = ?")
            params.append(ho_ten)
        # ki·ªÉm tra c·ªôt dien_thoai c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi d√πng
        if dien_thoai and self.table_has_column(conn, "benh_nhan", "dien_thoai"):
            conditions.append("dien_thoai = ?")
            params.append(dien_thoai)
        if so_cccd and self.table_has_column(conn, "benh_nhan", "so_cccd"):
            conditions.append("so_cccd = ?")
            params.append(so_cccd)

        if not conditions:
            return None

        sql = "SELECT id FROM benh_nhan WHERE " + " OR ".join(conditions) + " LIMIT 1"
        cur.execute(sql, params)
        row = cur.fetchone()
        return row[0] if row else None



    # ---------------------------
    # Sinh s·ªë h·ªì s∆° (TD + yyyymmdd + seq)
    # ---------------------------
    def generate_sohoso(self, conn):
        cur = conn.cursor()
        cur.execute("SELECT ma_hoso FROM tiep_don ORDER BY id DESC LIMIT 1")
        result = cur.fetchone()

        if result and result[0] and isinstance(result[0], str) and result[0].startswith("HS"):
            last_num = int(result[0][2:])  # b·ªè "HS"
        else:
            last_num = 0

        new_num = last_num + 1
        return f"HS{new_num:03d}"  # HS001, HS002, ...



    # ---------------------------
    # L∆∞u b·ªánh nh√¢n (n·∫øu ƒë√£ t·ªìn t·∫°i -> tr·∫£ v·ªÅ id, n·∫øu ch∆∞a -> insert)
    # Tr·∫£ v·ªÅ id b·ªánh nh√¢n
    # ---------------------------
    def save_benh_nhan(self, conn, data):
        cur = conn.cursor()

        # ki·ªÉm tra b·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_id = self.find_existing_patient(
            conn,
            ho_ten=data.get("ho_ten"),
            dien_thoai=data.get("dien_thoai"),
            so_cccd=data.get("so_cccd")
        )
        if existing_id:
            return existing_id  # tr·∫£ v·ªÅ id ƒë√£ t·ªìn t·∫°i

        # n·∫øu ch∆∞a t·ªìn t·∫°i, insert m·ªõi
        insert_cols = []
        insert_vals = []

        allowed = ["ho_ten", "gioi_tinh", "ngay_sinh", "tuoi", "dia_chi",
                   "dien_thoai", "so_cccd", "doi_tuong", "nghe_nghiep",
                   "nguoi_gioi_thieu"]
        # mapping: cung c·∫•p d·ªØ li·ªáu t·ª´ data
        payload = {
            "ho_ten": data.get("ho_ten"),
            "gioi_tinh": data.get("gioi_tinh"),
            "ngay_sinh": data.get("ngay_sinh"),
            "tuoi": data.get("tuoi"),
            "dia_chi": data.get("dia_chi"),
            "dien_thoai": data.get("dien_thoai"),
            "so_cccd": data.get("so_cccd"),
            "doi_tuong": data.get("doi_tuong"),
            "nghe_nghiep": data.get("nghe_nghiep"),
            "nguoi_gioi_thieu": data.get("nguoi_gioi_thieu")
        }

        # d√πng pragma ƒë·ªÉ bi·∫øt c·ªôt t·ªìn t·∫°i (defensive)
        cur.execute("PRAGMA table_info(benh_nhan)")
        exist_cols = [r[1] for r in cur.fetchall()]

        for col in allowed:
            if col in exist_cols:
                insert_cols.append(col)
                insert_vals.append(payload.get(col))

        placeholders = ",".join(["?"] * len(insert_vals))
        sql = f"INSERT INTO benh_nhan ({', '.join(insert_cols)}) VALUES ({placeholders})"
        cur.execute(sql, insert_vals)
        benh_nhan_id = cur.lastrowid
        conn.commit()


        return benh_nhan_id
    # ---------------------------
    # L∆∞u 1 record tiep_don, tr·∫£ v·ªÅ id tiep_don
    # ---------------------------
    def save_tiep_don(self, conn, benh_nhan_id, data):
        # ƒë·∫£m b·∫£o b·∫£ng tiep_don t·ªìn t·∫°i
        cur = conn.cursor()

        # t·∫°o so_hoso t·ª± ƒë·ªông d·ª±a theo ng√†y (yyyy-mm-dd)
        ngay = data.get("ngay_tiep_don") or QDate.currentDate().toString("yyyy-MM-dd")
        sohoso = self.generate_sohoso(conn)

        insert_cols = []
        insert_vals = []

        allowed = ["ma_hoso", "benh_nhan_id", "ngay_tiep_don", "phong_kham", "bac_si_kham",
                   "tinh_trang", "loai_kham", "tien_kham", "nv_tiepdon", "so_cccd",
                   "huyet_ap", "nhiet_do", "chieu_cao", "can_nang"]
        # mapping: cung c·∫•p d·ªØ li·ªáu t·ª´ data + benh_nhan_id + sohoso
        payload = {
            "ma_hoso": sohoso,
            "benh_nhan_id": benh_nhan_id,
            "ngay_tiep_don": ngay,
            "phong_kham": data.get("phong_kham"),
            "bac_si_kham": data.get("bac_si_kham"),
            "tinh_trang": data.get("tinh_trang"),
            "loai_kham": data.get("loai_kham"),
            "tien_kham": data.get("tien_kham"),
            "nv_tiepdon": data.get("nv_tiepdon"),
            "huyet_ap": data.get("huyet_ap"),
            "nhiet_do": data.get("nhiet_do"),
            "chieu_cao": data.get("chieu_cao"),
            "can_nang": data.get("can_nang")
        }

        # d√πng pragma ƒë·ªÉ bi·∫øt c·ªôt t·ªìn t·∫°i (defensive)
        cur.execute("PRAGMA table_info(tiep_don)")
        exist_cols = [r[1] for r in cur.fetchall()]

        for col in allowed:
            if col in exist_cols:
                insert_cols.append(col)
                insert_vals.append(payload.get(col))

        # n·∫øu b·∫£ng v·ª´a m·ªõi t·∫°o (kh√¥ng c√≥ c·ªôt), ta fallback insert t·∫•t c·∫£ c·ªôt theo b·∫£ng ti√™u chu·∫©n:
        if not insert_cols:
            # fallback: t·∫°o theo c·∫•u tr√∫c chu·∫©n (ensure_tiep_don_table ƒë√£ th·ª±c hi·ªán) => s·∫Ω c√≥ c·ªôt
            insert_cols = ["ma_hoso","benh_nhan_id","ngay_tiep_don","phong_kham","bac_si_kham","tinh_trang","loai_kham","tien_kham","nv_tiepdon","huyet_ap","nhiet_do","chieu_cao","can_nang"]
            insert_vals = [payload.get(c) for c in insert_cols]

        placeholders = ",".join(["?"] * len(insert_vals))
        sql = f"INSERT INTO tiep_don ({', '.join(insert_cols)}) VALUES ({placeholders})"
        cur.execute(sql, insert_vals)
        tiep_don_id = cur.lastrowid
        conn.commit()
        return tiep_don_id

    # ---------------------------
    # Gom d·ªØ li·ªáu t·ª´ form v√†o dict
    # ---------------------------
    def collect_form_data(self):
        data_bn = {
            "ho_ten": self.combo_hoten.currentText().strip(),
            "gioi_tinh": self.gioitinh.currentText() if hasattr(self, "gioitinh") else None,
            "ngay_sinh": self.ngaysinh.date().toString("yyyy-MM-dd") if hasattr(self, "ngaysinh") else None,
            "tuoi": int(self.tuoi.text()) if self.tuoi.text().isdigit() else None,
            "dia_chi": self.input_diachi.text().strip() if hasattr(self, "input_diachi") else None,
            "dien_thoai": self.input_dienthoai.text().strip() if hasattr(self, "input_dienthoai") else None,
            "so_cccd": self.input_cccd.text().strip() if hasattr(self, "input_cccd") else None,
            "doi_tuong": self.doituong.currentText() if hasattr(self, "doituong") else None,
            "nghe_nghiep": self.input_nghenghiep.text().strip() if hasattr(self, "input_nghenghiep") else None,
            "nguoi_gioi_thieu": self.nguoigt.currentText() if hasattr(self, "nguoigt") else None,
            "loai_kham": self.loaikham.currentText() if hasattr(self, "loaikham") else None
        }

        data_td = {
            "ngay_tiep_don": self.date_ngaylap.date().toString("yyyy-MM-dd") if hasattr(self, "date_ngaylap") else QDate.currentDate().toString("yyyy-MM-dd"),
            "phong_kham": self.combo_phongkham.currentText() if hasattr(self, "combo_phongkham") else None,
            "bac_si_kham": self.combo_bacsi.currentText() if hasattr(self, "combo_bacsi") else None,
            "tinh_trang": self.combo_tinhtrang.currentText() if hasattr(self, "combo_tinhtrang") else None,
            "loai_kham": self.loaikham.currentText() if hasattr(self, "loaikham") else None,
            "tien_kham": float(self.input_tienkham.text()) if hasattr(self, "input_tienkham") and self.input_tienkham.text().replace('.','',1).isdigit() else 0.0,
            "nv_tiepdon": self.combo_nvtiepdon.currentText() if hasattr(self, "combo_nvtiepdon") else None,
            "huyet_ap": self.input_huyetap.text().strip() if hasattr(self, "input_huyetap") else None,
            "nhiet_do": float(self.input_nhietdo.text()) if hasattr(self, "input_nhietdo") and self.input_nhietdo.text().replace('.','',1).isdigit() else None,
            "chieu_cao": float(self.input_chieucao.text()) if hasattr(self, "input_chieucao") and self.input_chieucao.text().replace('.','',1).isdigit() else None,
            "can_nang": float(self.input_cannang.text()) if hasattr(self, "input_cannang") and self.input_cannang.text().replace('.','',1).isdigit() else None,
            "ma_hoso": self.sohoso.text().strip() if hasattr(self, "sohoso") else None
        }

        return data_bn, data_td

    # ---------------------------
    # H√†m ch√≠nh: l∆∞u c·∫£ b·ªánh nh√¢n + ti·∫øp ƒë√≥n
    # ---------------------------
    def save_data(self):
        """L∆∞u ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n v√† phi·∫øu ti·∫øp ƒë√≥n v√†o CSDL"""
        try:
            conn = get_connection()
            data_bn, data_td = self.collect_form_data()
            print("ü©∫ D·ªØ li·ªáu b·ªánh nh√¢n:", data_bn)
            print("üìã D·ªØ li·ªáu ti·∫øp ƒë√≥n:", data_td)

            # üü¢ N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô s·ª≠a ‚Üí c·∫≠p nh·∫≠t b·∫£n ghi hi·ªán t·∫°i
            if getattr(self, "is_edit_mode", False) and getattr(self, "selected_ma_hoso", None):
                self.cap_nhat_khi_nhan_sua(conn, self.selected_ma_hoso, data_bn, data_td)
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t h·ªì s∆° {self.selected_ma_hoso} th√†nh c√¥ng!")
                self.is_edit_mode = False  # reset tr·∫°ng th√°i s·ª≠a
            else:
                # ‚ûï N·∫øu KH√îNG ·ªü ch·∫ø ƒë·ªô s·ª≠a ‚Üí th√™m m·ªõi nh∆∞ c≈©
                benh_nhan_id = self.save_benh_nhan(conn, data_bn)
                if not benh_nhan_id:
                    QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng th·ªÉ l∆∞u b·ªánh nh√¢n ‚Äî d·ªØ li·ªáu tr·ªëng ho·∫∑c l·ªói.")
                    return None, None

                tiep_don_id = self.save_tiep_don(conn, benh_nhan_id, data_td)
                if not tiep_don_id:
                    QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng th·ªÉ l∆∞u phi·∫øu ti·∫øp ƒë√≥n.")
                    return benh_nhan_id, None

                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u th√¥ng tin b·ªánh nh√¢n v√† phi·∫øu ti·∫øp ƒë√≥n!")

            # üîÅ Load l·∫°i danh s√°ch v√† b·∫£ng th·ªëng k√™
            self.load_danh_sach_tiep_don()
            self.load_thongke_luot_tiepdon()

            # üßπ Reset form sau khi l∆∞u xong
            self.reset_form()

            conn.close()
            return True

        except Exception as e:
            print("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu:", e)
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu:\n{e}")
            return None



    # ---------------------------
    # L∆∞u v√† reset (g√°n cho n√∫t 'Nh·∫≠p m·ªõi')
    # ---------------------------
    def save_and_reset(self):
        """G·ªçi l∆∞u d·ªØ li·ªáu r·ªìi reset form sau khi l∆∞u th√†nh c√¥ng"""
        result = self.save_data()

        # ‚úÖ N·∫øu l∆∞u th√†nh c√¥ng ‚Üí reset form
        if result:
            self.reset_form()


    # ---------------------------
    # Reset form (d·ªçn s·∫°ch ƒë·ªÉ nh·∫≠p ti·∫øp)
    # ---------------------------
    def reset_form(self):
        """Reset to√†n b·ªô form sau khi nh·∫≠p b·ªánh nh√¢n m·ªõi"""
        try:
            # üö´ Ng·∫Øt signal ƒë·ªÉ kh√¥ng t·ª± load d·ªØ li·ªáu c≈©
            try:
                self.combo_hoten.blockSignals(True)
            except:
                pass

            # --- ph·∫ßn reset nh∆∞ c≈© c·ªßa b·∫°n ---
            self.ngaysinh.dateChanged.disconnect(self.update_age)
            self.ngaysinh.setDate(QDate.currentDate())
            self.tuoi.clear()
            self.ngaysinh.dateChanged.connect(self.update_age)

            self.combo_hoten.setEditText("")
            self.gioitinh.setCurrentIndex(0)
            self.doituong.setCurrentIndex(0)
            self.nguoigt.setCurrentIndex(0)
            self.loaikham.setCurrentIndex(0)

            self.input_diachi.clear()
            self.input_dienthoai.clear()
            self.input_cccd.clear()
            self.input_nghenghiep.clear()

            self.combo_phongkham.setCurrentIndex(0)
            self.combo_bacsi.setCurrentIndex(0)
            self.combo_tinhtrang.setCurrentIndex(0)
            self.combo_nvtiepdon.setCurrentIndex(0)

            self.input_chieucao.clear()
            self.input_cannang.clear()
            self.input_huyetap.clear()
            self.input_nhietdo.clear()
            self.input_tienkham.setText("0")
            self.date_ngaylap.setDate(QDate.currentDate())

            # Sinh s·ªë h·ªì s∆° m·ªõi
            try:
                conn = get_connection()
                cur = conn.cursor()
                cur.execute("SELECT COUNT(*) FROM tiep_don")
                count = cur.fetchone()[0] or 0
                self.sohoso.setText(f"HS{count + 1:03d}")
                conn.close()
            except Exception as e:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ sinh s·ªë h·ªì s∆° m·ªõi:", e)
                self.sohoso.setText("HS001")

            # L√†m m·ªõi danh s√°ch
            self.load_benh_nhan_list()

            # Focus v·ªÅ h·ªç t√™n
            self.combo_hoten.setFocus()
            self.combo_hoten.setEditText("")

            print("üßπ Form ƒë√£ ƒë∆∞·ª£c reset ho√†n to√†n!")

        except Exception as e:
            print("‚ùå L·ªói khi reset form:", e)

        finally:
            # ‚úÖ B·∫≠t l·∫°i signal sau khi reset xong
            try:
                self.combo_hoten.blockSignals(False)
            except:
                pass


    def sua_du_lieu(self):
        if not self.selected_ma_hoso:
            QMessageBox.warning(self, "Th√¥ng b√°o", "Vui l√≤ng ch·ªçn m·ªôt h·ªì s∆° ƒë·ªÉ s·ª≠a.")
            return

        conn = get_connection()
        cur = conn.cursor()

        cur.execute("""
            SELECT 
                t.ma_hoso, t.ngay_tiep_don, t.phong_kham, t.bac_si_kham, 
                t.tinh_trang, t.tien_kham, t.nv_tiepdon, t.huyet_ap, 
                t.nhiet_do, t.chieu_cao, t.can_nang,
                b.ho_ten, b.gioi_tinh, b.ngay_sinh, b.tuoi, b.dia_chi,
                b.dien_thoai, b.so_cccd, b.doi_tuong, b.nghe_nghiep,
                b.nguoi_gioi_thieu, b.loai_kham
            FROM tiep_don t
            JOIN benh_nhan b ON t.benh_nhan_id = b.id
            WHERE t.ma_hoso = ?
        """, (self.selected_ma_hoso,))
        record = cur.fetchone()
        conn.close()

        if not record:
            QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y h·ªì s∆° trong c∆° s·ªü d·ªØ li·ªáu.")
            return

        # --- T√°ch d·ªØ li·ªáu ---
        data_td = {
            "ma_hoso": record[0],
            "ngay_tiep_don": record[1],
            "phong_kham": record[2],
            "bac_si_kham": record[3],
            "tinh_trang": record[4],
            "tien_kham": record[5],
            "nv_tiepdon": record[6],
            "huyet_ap": record[7],
            "nhiet_do": record[8],
            "chieu_cao": record[9],
            "can_nang": record[10],
        }

        data_bn = {
            "ho_ten": record[11],
            "gioi_tinh": record[12],
            "ngay_sinh": record[13],
            "tuoi": record[14],
            "dia_chi": record[15],
            "dien_thoai": record[16],
            "so_cccd": record[17],
            "doi_tuong": record[18],
            "nghe_nghiep": record[19],
            "nguoi_gioi_thieu": record[20],
            "loai_kham": record[21],
        }

        # --- ƒê·ªï d·ªØ li·ªáu l√™n form b·ªánh nh√¢n ---
        self.combo_hoten.setCurrentText(data_bn["ho_ten"])
        self.gioitinh.setCurrentText(data_bn["gioi_tinh"])
        if data_bn["ngay_sinh"]:
            self.ngaysinh.setDate(QDate.fromString(data_bn["ngay_sinh"], "yyyy-MM-dd"))
        self.update_age()
        self.input_diachi.setText(data_bn["dia_chi"] or "")
        self.input_dienthoai.setText(data_bn["dien_thoai"] or "")
        self.input_cccd.setText(data_bn["so_cccd"] or "")
        self.doituong.setCurrentText(data_bn["doi_tuong"] or "")
        self.input_nghenghiep.setText(data_bn["nghe_nghiep"] or "")
        self.nguoigt.setCurrentText(data_bn["nguoi_gioi_thieu"] or "")
        self.loaikham.setCurrentText(data_bn["loai_kham"] or "")

        # --- ƒê·ªï d·ªØ li·ªáu l√™n form ti·∫øp ƒë√≥n ---
        self.sohoso.setText(data_td["ma_hoso"])
        self.combo_phongkham.setCurrentText(data_td["phong_kham"])
        self.combo_bacsi.setCurrentText(data_td["bac_si_kham"])
        if data_td["ngay_tiep_don"]:
            self.date_ngaylap.setDate(QDate.fromString(data_td["ngay_tiep_don"], "yyyy-MM-dd"))
        self.combo_tinhtrang.setCurrentText(data_td["tinh_trang"])
        self.input_tienkham.setText(str(data_td["tien_kham"] or "0"))
        self.combo_nvtiepdon.setCurrentText(data_td["nv_tiepdon"])
        self.input_huyetap.setText(str(data_td["huyet_ap"] or ""))
        self.input_nhietdo.setText(str(data_td["nhiet_do"] or ""))
        self.input_chieucao.setText(str(data_td["chieu_cao"] or ""))
        self.input_cannang.setText(str(data_td["can_nang"] or ""))

        self.is_edit_mode = True # ƒê√°nh d·∫•u ƒëang ·ªü ch·∫ø ƒë·ªô s·ª≠a
        QMessageBox.information(self, "S·∫µn s√†ng", f"ƒê√£ t·∫£i th√¥ng tin h·ªì s∆° {self.selected_ma_hoso} ƒë·ªÉ ch·ªânh s·ª≠a.")

    # ---------------------------
    # X√≥a h·ªì s∆° ti·∫øp ƒë√≥n v√† b·ªánh nh√¢n li√™n quan
    # ---------------------------
    def xoa_du_lieu(self):
        """X√≥a h·ªì s∆° ti·∫øp ƒë√≥n v√† th√¥ng tin b·ªánh nh√¢n li√™n quan + c·∫≠p nh·∫≠t b·∫£ng th·ªëng k√™"""
        if not self.selected_ma_hoso:
            QMessageBox.warning(self, "Th√¥ng b√°o", "Vui l√≤ng ch·ªçn m·ªôt h·ªì s∆° ƒë·ªÉ x√≥a.")
            return

        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªì s∆° {self.selected_ma_hoso} v√† to√†n b·ªô th√¥ng tin li√™n quan kh√¥ng?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reply == QMessageBox.No:
            return

        try:
            conn = get_connection()
            cur = conn.cursor()

            # üîπ L·∫•y ID b·ªánh nh√¢n t∆∞∆°ng ·ª©ng
            cur.execute("SELECT benh_nhan_id FROM tiep_don WHERE ma_hoso = ?", (self.selected_ma_hoso,))
            result = cur.fetchone()
            benh_nhan_id = result[0] if result else None

            # üîπ X√≥a trong b·∫£ng tiep_don
            cur.execute("DELETE FROM tiep_don WHERE ma_hoso = ?", (self.selected_ma_hoso,))

            # üîπ X√≥a b·ªánh nh√¢n (n·∫øu c·∫ßn)
            if benh_nhan_id:
                cur.execute("DELETE FROM benh_nhan WHERE id = ?", (benh_nhan_id,))

            conn.commit()
            conn.close()

            # üîπ X√≥a kh·ªèi b·∫£ng th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n (n·∫øu c√≥)
            for row in range(self.table_thongke.rowCount()):
                ma_hoso_cell = self.table_thongke.item(row, 1)
                if ma_hoso_cell and ma_hoso_cell.text() == self.selected_ma_hoso:
                    self.table_thongke.removeRow(row)
                    break  # d·ª´ng lu√¥n sau khi x√≥a

            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a h·ªì s∆° {self.selected_ma_hoso} th√†nh c√¥ng!")

            # üîπ L√†m m·ªõi danh s√°ch v√† form
            self.load_danh_sach_tiep_don()
            self.reset_form()
            self.selected_ma_hoso = None

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu:\n{e}")

    # ---------------------------
    # In phi·∫øu ti·∫øp ƒë√≥n ra file PDF
    # ---------------------------
    def in_phieu_tiep_don(self):
        try:
            # Gi·∫£ s·ª≠ ƒëo·∫°n code c·ªßa b·∫°n ph√≠a tr√™n ƒë√£ t·∫°o file PDF s·∫µn (v√≠ d·ª• HS001.pdf)
            file_path = self.tao_file_pdf_tiepdon()  # H√†m n√†y b·∫°n ƒëang d√πng ƒë·ªÉ sinh PDF

            # M·ªü c·ª≠a s·ªï xem PDF ngay trong app
            from forms.pdf_viewer import PDFViewer
            self.pdf_window = PDFViewer(file_path)
            self.pdf_window.show()

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ m·ªü file PDF:\n{e}")

    def tao_file_pdf_tiepdon(self):
        """
        Sinh file PDF cho h·ªì s∆° ti·∫øp ƒë√≥n.
        D√πng font Arial Unicode ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát.
        """
        try:
            # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
            output_dir = os.path.join(os.path.dirname(__file__), "..", "output")
            os.makedirs(output_dir, exist_ok=True)

            file_path = os.path.join(output_dir, f"{self.selected_ma_hoso}.pdf")

            # === ƒêƒÉng k√Ω font Unicode ===
            font_path = os.path.join(os.path.dirname(__file__), "fonts", "arial.ttf")
            if not os.path.exists(font_path):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file font: {font_path}")

            pdfmetrics.registerFont(TTFont("ArialUnicode", font_path))

            # === T·∫°o file PDF ===
            c = canvas.Canvas(file_path, pagesize=A4)
            c.setFont("ArialUnicode", 16)
            c.drawCentredString(300, 800, "PHI·∫æU TI·∫æP ƒê√ìN KH√ÅM B·ªÜNH")

            c.setFont("ArialUnicode", 12)
            y = 760
            line_height = 25

            def write_line(text):
                nonlocal y
                c.drawString(80, y, text)
                y -= line_height

            # Ghi n·ªôi dung phi·∫øu
            write_line(f"S·ªë h·ªì s∆°: {self.selected_ma_hoso}")
            write_line(f"H·ªç v√† t√™n: {self.combo_hoten.currentText()}")
            write_line(f"Gi·ªõi t√≠nh: {self.gioitinh.currentText()}")
            write_line(f"Ph√≤ng kh√°m: {self.combo_phongkham.currentText()}")
            write_line(f"B√°c sƒ© kh√°m: {self.combo_bacsi.currentText()}")

            c.save()
            return file_path

        except Exception as e:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o file PDF:\n{e}")
            print("‚ùå L·ªói t·∫°o PDF:", e)
            return None

    def in_so_thu_tu(self):
        try:
            file_path = self.tao_file_stt_pdf()
            from forms.pdf_viewer import PDFViewer
            self.pdf_window = PDFViewer(file_path)
            self.pdf_window.show()
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ in STT:\n{e}")


    def tao_file_stt_pdf(self):
        from reportlab.lib.pagesizes import A6, portrait
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from datetime import datetime
        import os, json

        # üü¢ ƒêƒÉng k√Ω font Unicode ti·∫øng Vi·ªát
        font_path = os.path.join(os.getcwd(), "forms", "fonts", "arial.ttf")
        pdfmetrics.registerFont(TTFont("ArialUnicode", font_path))

        # üü¢ Chu·∫©n b·ªã d·ªØ li·ªáu
        hoten = self.combo_hoten.currentText().strip()
        phongkham = self.combo_phongkham.currentText().strip()
        bacsi = self.combo_bacsi.currentText().strip()
        gioitinh = self.gioitinh.currentText().strip()
        namsinh = self.tuoi.text().strip()
        ngay = datetime.now().strftime("%d th√°ng %m nƒÉm %Y")

        # üü¢ T·∫°o th∆∞ m·ª•c output v√† file l∆∞u s·ªë th·ª© t·ª±
        os.makedirs("output", exist_ok=True)
        counter_file = os.path.join("output", "stt_counter.json")

        today = datetime.now().strftime("%Y-%m-%d")
        stt = 1

        # üü¢ ƒê·ªçc s·ªë th·ª© t·ª± c≈© (n·∫øu c√≥)
        if os.path.exists(counter_file):
            with open(counter_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                if data.get("date") == today:
                    stt = data.get("stt", 0) + 1

        # üü¢ Ghi l·∫°i STT m·ªõi v√† ng√†y hi·ªán t·∫°i
        with open(counter_file, "w", encoding="utf-8") as f:
            json.dump({"date": today, "stt": stt}, f, ensure_ascii=False, indent=2)

        # üü¢ T·∫°o file PDF
        file_path = os.path.join("output", f"STT_{self.selected_ma_hoso}.pdf")
        c = canvas.Canvas(file_path, pagesize=portrait(A6))

        # ---- Giao di·ªán in ----
        c.setFont("ArialUnicode", 14)
        c.drawCentredString(150, 400, "S·ªê TH·ª® T·ª∞ KH√ÅM")
        c.setFont("ArialUnicode", 10)
        c.drawCentredString(150, 385, f"Ng√†y {ngay}")

        c.setFont("ArialUnicode", 11)
        c.drawString(20, 360, f"Ph√≤ng: {phongkham}")
        c.drawString(20, 345, f"BS kh√°m: {bacsi}")

        # --- K·∫ª ƒë∆∞·ªùng ---
        c.line(20, 340, 280, 340)

        # --- STT to v√† n·ªïi b·∫≠t ---
        c.setFont("ArialUnicode", 20)
        c.drawCentredString(150, 310, f"STT: {str(stt).zfill(2)}")

        # --- H·ªç t√™n ---
        c.setFont("ArialUnicode", 13)
        c.drawCentredString(150, 285, hoten)

        # --- Gi·ªõi t√≠nh / NƒÉm sinh ---
        c.setFont("ArialUnicode", 10)
        c.drawString(30, 260, f"Gi·ªõi: {gioitinh}")
        c.drawRightString(270, 260, f"NƒÉm sinh: {namsinh}")

        # --- Ghi ch√∫ ---
        c.setFont("ArialUnicode", 9)
        c.drawCentredString(150, 230, "Vui l√≤ng ch·ªù ƒë·∫øn l∆∞·ª£t theo s·ªë th·ª© t·ª± ƒë∆∞·ª£c g·ªçi")
        c.drawCentredString(150, 218, "(Phi·∫øu ch·ªâ c√≥ gi√° tr·ªã trong ng√†y)")

        c.save()
        return file_path



    # ---------------------------
    # C·∫≠p nh·∫≠t b·∫£n ghi hi·ªán c√≥
    # ---------------------------
    def cap_nhat_khi_nhan_sua(self, conn, ma_hoso, data_bn, data_td):
        cur = conn.cursor()

        # L·∫•y ID b·ªánh nh√¢n t·ª´ m√£ h·ªì s∆°
        cur.execute("SELECT benh_nhan_id FROM tiep_don WHERE ma_hoso = ?", (ma_hoso,))
        result = cur.fetchone()
        if not result:
            QMessageBox.warning(self, "L·ªói", f"Kh√¥ng t√¨m th·∫•y h·ªì s∆° {ma_hoso}.")
            return
        benh_nhan_id = result[0]

        # --- C·∫≠p nh·∫≠t b·∫£ng benh_nhan ---
        set_bn = ", ".join([f"{col} = ?" for col in data_bn.keys()])
        cur.execute(f"UPDATE benh_nhan SET {set_bn} WHERE id = ?", (*data_bn.values(), benh_nhan_id))

        # --- C·∫≠p nh·∫≠t b·∫£ng tiep_don ---
        set_td = ", ".join([f"{col} = ?" for col in data_td.keys()])
        cur.execute(f"UPDATE tiep_don SET {set_td} WHERE ma_hoso = ?", (*data_td.values(), ma_hoso))

        conn.commit()

    # ---------------------------
    # X·ª≠ l√Ω khi ch·ªçn 1 d√≤ng trong b·∫£ng danh s√°ch
    # ---------------------------
    def on_row_selected(self, *args):
        """X·ª≠ l√Ω khi ch·ªçn 1 d√≤ng trong b·∫£ng ti·∫øp ƒë√≥n"""
        if self.tableTiepDon.currentRow() < 0:
            return  # kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c ch·ªçn

        row = self.tableTiepDon.currentRow()
        item = self.tableTiepDon.item(row, 0)
        if item:
            self.selected_ma_hoso = item.text()
            print(f"üëâ ƒê√£ ch·ªçn h·ªì s∆°: {self.selected_ma_hoso}")

    
    # ---------------------------
    # Load d·ªØ li·ªáu b·ªánh nh√¢n v√†o form (khi ch·ªçn t·ª´ combobox)
    # ---------------------------
    def load_patient_into_form(self, ho_ten):
        try:
            conn = get_connection()
            cur = conn.cursor()
            cur.execute("SELECT * FROM benh_nhan WHERE ho_ten = ? LIMIT 1", (ho_ten,))
            columns = [desc[0] for desc in cur.description]
            row = cur.fetchone()
            conn.close()

            if not row:
                return

            data = dict(zip(columns, row))

            # ƒêi·ªÅn d·ªØ li·ªáu v√†o form
            self.combo_hoten.setCurrentText(data.get("ho_ten", ""))
            self.gioitinh.setCurrentText(data.get("gioi_tinh", "Nam"))
            if data.get("ngay_sinh"):
                self.ngaysinh.setDate(QDate.fromString(data.get("ngay_sinh"), "yyyy-MM-dd"))
            self.update_age()
            self.input_diachi.setText(data.get("dia_chi", ""))
            self.input_dienthoai.setText(data.get("dien_thoai", ""))
            self.input_cccd.setText(data.get("so_cccd", ""))
            self.doituong.setCurrentText(data.get("doi_tuong", "BHYT"))
            self.input_nghenghiep.setText(data.get("nghe_nghiep", ""))
            self.nguoigt.setCurrentText(data.get("nguoi_gioi_thieu", "B√°c sƒ©"))
            self.loaikham.setCurrentText(data.get("loai_kham", "Kh√°m v√† t∆∞ v·∫•n"))
            self.combo_hoten.setFocus()
            self.combo_hoten.setEditText(ho_ten)

            # --- Load th√™m th√¥ng tin ti·∫øp ƒë√≥n ---
            conn = get_connection()
            cur = conn.cursor()
            cur.execute("""
                SELECT * FROM tiep_don 
                WHERE benh_nhan_id = (
                    SELECT id FROM benh_nhan WHERE ho_ten = ? LIMIT 1
                )
                ORDER BY ngay_tiep_don DESC LIMIT 1
            """, (ho_ten,))
            tiepdon = cur.fetchone()
            columns = [desc[0] for desc in cur.description] if tiepdon else []
            conn.close()

            try:
                if tiepdon:
                    td_data = dict(zip(columns, tiepdon))

                    # H√†m nh·ªè ƒë·ªÉ √©p m·ªçi gi√° tr·ªã sang chu·ªói, k·ªÉ c·∫£ None hay float
                    def safe_str(value):
                        if value is None:
                            return ""
                        if isinstance(value, float):
                            # N·∫øu l√† s·ªë th·ª±c nh∆∞ng tr√≤n (vd: 70.0) ‚Üí hi·ªÉn th·ªã "70"
                            if value.is_integer():
                                return str(int(value))
                            else:
                                return f"{value:.2f}".rstrip('0').rstrip('.')  # Gi·ªØ t·ªëi ƒëa 2 ch·ªØ s·ªë sau d·∫•u ph·∫©y
                        return str(value)

                    self.sohoso.setText(safe_str(td_data.get("ma_hoso")))
                    self.combo_phongkham.setCurrentText(safe_str(td_data.get("phong_kham")))
                    self.combo_bacsi.setCurrentText(safe_str(td_data.get("bac_si_kham")))
                    self.date_ngaylap.setDate(QDate.fromString(safe_str(td_data.get("ngay_tiep_don")), "yyyy-MM-dd"))
                    self.combo_tinhtrang.setCurrentText(safe_str(td_data.get("tinh_trang")))
                    self.input_tienkham.setText(safe_str(td_data.get("tien_kham")))
                    self.combo_nvtiepdon.setCurrentText(safe_str(td_data.get("nv_tiepdon")))
                    self.input_huyetap.setText(safe_str(td_data.get("huyet_ap")))
                    self.input_nhietdo.setText(safe_str(td_data.get("nhiet_do")))
                    self.input_chieucao.setText(safe_str(td_data.get("chieu_cao")))
                    self.input_cannang.setText(safe_str(td_data.get("can_nang")))
            except Exception as e:
                print("‚ùå L·ªói khi load ti·∫øp ƒë√≥n:", e)



        except Exception as e:
            import traceback
            print("‚ùå L·ªói khi load b·ªánh nh√¢n:", e)
            traceback.print_exc()

        
        
    
    # ---------------------------
    # K·∫øt n·ªëi s·ª± ki·ªán khi ch·ªçn t√™n t·ª´ combobox
    # ---------------------------
    def connect_combobox_event(self):
        self.combo_hoten.currentTextChanged.connect(self.load_patient_into_form)
        self.combo_hoten.lineEdit().editingFinished.connect(lambda: self.load_patient_into_form(self.combo_hoten.currentText()))



    # ---------------------------
    # Load danh s√°ch ti·∫øp ƒë√≥n kh√°m ch·ªØa b·ªánh
    # ---------------------------
    def load_danh_sach_tiep_don(self):
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT td.ma_hoso, td.ngay_tiep_don, td.phong_kham, bn.ho_ten, td.bac_si_kham, td.tinh_trang
            FROM tiep_don td
            JOIN benh_nhan bn ON td.benh_nhan_id = bn.id
            ORDER BY td.ngay_tiep_don ASC
        """)
        records = cur.fetchall()
        conn.close()

        # G√°n ƒë√∫ng b·∫£ng
        table = self.tableTiepDon  # ho·∫∑c self.findChild(QTableWidget, "tableTiepDon")
        table.setRowCount(0)

        for row_data in records:
            row = table.rowCount()
            table.insertRow(row)
            for col, value in enumerate(row_data):
                table.setItem(row, col, QTableWidgetItem(str(value)))

    # ---------------------------
    # Load danh s√°ch th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n
    # ---------------------------
    def add_thongke_row(self, phong_kham, ma_hoso, da_kham=False):
        """Th√™m m·ªôt d√≤ng v√†o b·∫£ng th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n"""
        row = self.table_thongke.rowCount()
        self.table_thongke.insertRow(row)

        # C·ªôt 1: Ph√≤ng kh√°m
        item_phongkham = QTableWidgetItem(phong_kham)
        item_phongkham.setTextAlignment(Qt.AlignCenter)
        self.table_thongke.setItem(row, 0, item_phongkham)

        # C·ªôt 2: Ti·∫øp ƒë√≥n (s·ªë h·ªì s∆°)
        item_mahoso = QTableWidgetItem(ma_hoso)
        item_mahoso.setTextAlignment(Qt.AlignCenter)
        self.table_thongke.setItem(row, 1, item_mahoso)

        # C·ªôt 3: Checkbox "ƒê√£ kh√°m"
        checkbox = QCheckBox()
        checkbox.setChecked(da_kham)
        checkbox.setStyleSheet("margin-left:50%; margin-right:50%;")  # cƒÉn gi·ªØa
        self.table_thongke.setCellWidget(row, 2, checkbox)

    def load_thongke_luot_tiepdon(self):
        """Load to√†n b·ªô d·ªØ li·ªáu th·ªëng k√™ l∆∞·ª£t ti·∫øp ƒë√≥n t·ª´ DB"""
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()

        # L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng tiep_don (v√† n·ªëi v·ªõi benh_nhan n·∫øu c·∫ßn)
        cur.execute("""
            SELECT 
                t.phong_kham, 
                t.ma_hoso, 
                CASE 
                    WHEN t.tinh_trang LIKE '%ƒë√£ kh√°m%' OR t.tinh_trang LIKE '%ho√†n th√†nh%' 
                    THEN 1 ELSE 0 
                END AS da_kham
            FROM tiep_don t
            ORDER BY t.id ASC
        """)
        rows = cur.fetchall()
        conn.close()

        # X√≥a to√†n b·ªô h√†ng c≈©
        self.table_thongke.setRowCount(0)

        # ƒê·ªï d·ªØ li·ªáu v√†o b·∫£ng
        for row in rows:
            phong_kham, ma_hoso, da_kham = row
            self.add_thongke_row(phong_kham or "", ma_hoso or "", bool(da_kham))


